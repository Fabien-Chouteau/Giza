with Ada.Text_IO;  use Ada.Text_IO;
use Ada;

package body BMP is

   procedure Debug (Line : String);

   procedure Print_Palette (File_Out     : Ada.Text_IO.File_Type;
                            Palette_Data : Palette;
                            Pixel_Size   : Integer);

   -----------
   -- Debug --
   -----------

   procedure Debug (Line : String) is
   begin
      if Verbose then
         Put_Line (Line);
      end if;
   end Debug;

   -------------------
   -- Print_Palette --
   -------------------

   procedure Print_Palette (File_Out     : Ada.Text_IO.File_Type;
                            Palette_Data : Palette;
                            Pixel_Size   : Integer)
   is
      C   : Color_Definition;
   begin
      Text_IO.Put_Line (File_Out, "Palette => (");
      for Index in Palette_Data'Range loop
         C := Palette_Data (Index);
         Debug ("Index:" & Index'Img & " R:" & C.R'Img & " G:" &
                     C.G'Img & " B:" & C.B'Img);
         Text_IO.Put (File_Out, "(R =>" & C.R'Img &
                        ", G =>" & C.G'Img &
                        ", B =>" & C.B'Img &
                        ")");
         if Index = Palette_Data'Last then
            if Palette_Data'Length = 2**Pixel_Size then
               Text_IO.Put_Line (File_Out, "),");
            else
               Text_IO.Put_Line (File_Out, ", others => (0, 0, 0)),");
            end if;
         else
            Text_IO.Put_Line (File_Out, ",");
         end if;
      end loop;

   end Print_Palette;

   ----------------
   -- Palettized --
   ----------------

   procedure Palettized
     (File_In : Stream_IO.File_Type;
      Input    : Stream_IO.Stream_Access;
      File_Out : Ada.Text_IO.File_Type;
      Package_Name : String;
      Header   : BMP.Header;
      Info     : BMP.Info;
      Row_Size : Integer)
   is
      Raw_palette : P8_Array (0 .. Integer (Info.Palette_Size / 2));
      type P16_Array is array (Integer range <>) of Unsigned_16;
      Raw_palette_16 : P16_Array (0 .. Integer (Info.Palette_Size - 1));
      Palette_Data : Palette (0 .. Unsigned_8 (Info.Palette_Size - 1));
      Offset : Integer;
      Pix_Values : Pix_Index_Array (0 .. Row_Size - 1);
      Raw_Bytes : P8_Array (0 .. Row_Size - 1);
      Byte_Index, Pix_Index : Integer;
      Palette_Index : Unsigned_8;
      Size_Str : constant String := (case Info.Pixel_Size is
                                        when 1 => "1bit",
                                        when 2 => "2bits",
                                        when 4 => "4bits",
                                        when 8 => "8bits",
                                        when others => "invalid_pix_size");
   begin
      if Info.Pixel_Size /= 1
        and then Info.Pixel_Size /= 2
        and then Info.Pixel_Size /= 4
        and then Info.Pixel_Size /= 8
      then
         Put_Line ("Pix size not supported for palettized BMP.");
         return;
      end if;

      Stream_IO.Set_Index (File_In,
                           Stream_IO.Positive_Count (55));
      Palette'Read (Input, Palette_Data);
      Put_Line ("Reading palette and converting to 24bits RGB...");

      Stream_IO.Set_Index (File_In,
                           Stream_IO.Positive_Count (55));
      P8_Array'Read (Input, Raw_palette);
      Stream_IO.Set_Index (File_In,
                           Stream_IO.Positive_Count (55));
      P16_Array'Read (Input, Raw_palette_16);

      Text_IO.Put_Line (File_Out, "--  This file was generated by bmp2ada");
      Text_IO.Put_Line (File_Out, "with Giza.Bitmaps; use Giza.Bitmaps;");
      Text_IO.Put_Line (File_Out, "with Giza.Image.Bitmap.Indexed_" &
                          Size_Str & ";");
      Text_IO.New_Line (File_Out);
      Text_IO.Put_Line (File_Out, "package " & Package_Name & " is");
      Text_IO.Put_Line (File_Out, "   pragma Style_Checks (Off);");
      Text_IO.New_Line (File_Out);
      Text_IO.Put (File_Out, "   Data : aliased ");

      Text_IO.Put (File_Out, "Indexed_" & Size_Str & ".Bitmap_Indexed");

      Text_IO.Put_Line (File_Out, " := (W =>" &
                          Info.Width'Img &
                          ", H =>" & Info.Height'Img & ",");

      Print_Palette (File_Out, Palette_Data, Integer (Info.Pixel_Size));

      Text_IO.Put_Line (File_Out, " Data => ((");

      Put_Line ("Reading bitmap data...");

      for Row_Cnt in reverse 0 .. Integer (Info.Height) - 1 loop
         Offset := Integer (Header.Offset) + Row_Size * Row_Cnt + 1;
         Debug ("Read Row at offset:" & Offset'Img);

         --  Move read pointer to where the row data starts.
         Stream_IO.Set_Index (File_In,
                              Stream_IO.Positive_Count (Offset));
         P8_Array'Read (Input, Raw_Bytes);

         for Index in Raw_Bytes'Range loop
            Pix_Values (Index).P8 (0) := Raw_Bytes (Index);
         end loop;

         for Index in 0 .. Integer (Info.Width - 1) loop
            Byte_Index := Index / (8 / Integer (Info.Pixel_Size));
            Pix_Index := Index mod (8 / Integer (Info.Pixel_Size));

            Debug ("Byte_Index:" & Byte_Index'Img);
            Debug ("Pix_Index:" & Pix_Index'Img);
            case Info.Pixel_Size is
               when 1 =>
                  Palette_Index :=
                    Unsigned_8 (Pix_Values (Byte_Index).P1 (7 - Pix_Index));
               when 2 =>
                  Palette_Index :=
                    Unsigned_8 (Pix_Values (Byte_Index).P2 (Pix_Index));
               when 4 =>
                  Palette_Index :=
                    Unsigned_8 (Pix_Values (Byte_Index).P4 (Pix_Index));
               when 8 =>
                  Palette_Index := Pix_Values (Byte_Index).P8 (Pix_Index);
               when others =>
                  raise Program_Error;
            end case;

            Debug ("Palette_Index:" & Palette_Index'Img);

            Text_IO.Put (File_Out, Palette_Index'Img);
            if Index = Integer (Info.Width - 1) then
               --  End of Row
               if Row_Cnt = 0 then
                  Text_IO.Put_Line (File_Out, ")");
               else
                  Text_IO.Put_Line (File_Out, "), (");
               end if;
            else
               --  End of pixel
               Text_IO.Put (File_Out, ",");
            end if;
         end loop;
      end loop;
      Text_IO.Put_Line (File_Out, "));");
      Text_IO.New_Line (File_Out);

      Text_IO.Put_Line (File_Out, "   Image :");
      Text_IO.Put_Line (File_Out, "   aliased Giza.Image.Bitmap.Indexed_" &
                          Size_Str & ".Instance");
      Text_IO.Put_Line (File_Out, "     (Data'Access);");
      Text_IO.Put_Line (File_Out, "   pragma Style_Checks (On);");
      Text_IO.Put_Line (File_Out, "end " & Package_Name & ";");
   end Palettized;

end BMP;
