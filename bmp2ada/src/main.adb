with GNAT.Command_Line; use GNAT.Command_Line;
with Ada; use Ada;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Streams.Stream_IO;
use Ada.Streams;
with BMP;
with Interfaces; use Interfaces;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Directories;

procedure Main is
   File_In  : Stream_IO.File_Type;
   File_Out : Ada.Text_IO.File_Type;
   Input    : Stream_IO.Stream_Access;
   Header   : BMP.Header;
   Info     : BMP.Info;
   Row_Size, Row_Padding : Integer;

   Output_Dir : Unbounded_String := Null_Unbounded_String;
   Output_Filename : Unbounded_String := Null_Unbounded_String;

   function Get_Obj_Dir (Filename : String) return Boolean;

   function Get_Obj_Dir (Filename : String) return Boolean is
      File       : Ada.Text_IO.File_Type;
   begin
      Ada.Text_IO.Open (File => File,
                        Mode => Ada.Text_IO.In_File,
                        Name => Filename);
      declare
         Line : constant String := Ada.Text_IO.Get_Line (File);
      begin
         Ada.Text_IO.Close (File);

         if Line'Length /= 0 then
            Text_IO.Put_Line ("Output directory: '" & Line & "'");
            Output_Dir := To_Unbounded_String (Line);
            return True;
         else
            return False;
         end if;
      end;
   end Get_Obj_Dir;
begin
   loop
      case Getopt ("o: d: v -help") is
      when 'o' =>
         Output_Filename := To_Unbounded_String (Parameter);
         Put_Line ("Output filename:" & Parameter);
      when 'd' =>
         if not Get_Obj_Dir (Parameter) then
            return;
         end if;

      when 'v' =>
         BMP.Verbose := True;

      when '-' =>
         if Full_Switch = "--help" then
            Put_Line ("Use -o <filename> to specify output file");
            return;
         end if;
      when others =>
         exit;
      end case;
   end loop;

   declare
      Input_Filename  : constant String := Get_Argument (Do_Expansion => True);
      Output_Path : constant String :=
        To_String (Output_Dir & Output_Filename);
      Package_Name    : constant String :=
        Ada.Directories.Base_Name (Input_Filename);
   begin
      if Input_Filename'Length = 0 then
         Put_Line ("Input filename missing...");
         return;
      end if;

      Put_Line ("Openning input " & Input_Filename);
      Stream_IO.Open (File_In, Stream_IO.In_File, Input_Filename);
      Input := Stream_IO.Stream (File_In);

      Put_Line ("Creating output " & Output_Path);
      Text_IO.Create (File_Out, Text_IO.Out_File, Output_Path);

      Put_Line ("Creating package: " & Package_Name);

      BMP.Header'Read (Input, Header);
      Text_IO.Put_Line ("Signature " & Header.Signature'Img);
      Text_IO.Put_Line ("Size " & Header.Size'Img);
      Text_IO.Put_Line ("Reserved1 " & Header.Reserved1'Img);
      Text_IO.Put_Line ("Reserved2 " & Header.Reserved2'Img);
      Text_IO.Put_Line ("Offset " & Header.Offset'Img);

      BMP.Info'Read (Input, Info);
      Text_IO.Put_Line ("Struct_Size " & Info.Struct_Size'Img);
      Text_IO.Put_Line ("Width " & Info.Width'Img);
      Text_IO.Put_Line ("Height " & Info.Height'Img);
      Text_IO.Put_Line ("Planes " & Info.Planes'Img);
      Text_IO.Put_Line ("Pixel_Size " & Info.Pixel_Size'Img);
      Text_IO.Put_Line ("Compression " & Info.Compression'Img);
      Text_IO.Put_Line ("Image_Size " & Info.Image_Size'Img);
      Text_IO.Put_Line ("PPMX " & Info.PPMX'Img);
      Text_IO.Put_Line ("PPMY " & Info.PPMY'Img);
      Text_IO.Put_Line ("Palette_Size " & Info.Palette_Size'Img);
      Text_IO.Put_Line ("Important " & Info.Important'Img);

      Row_Size := Integer (Info.Width) * Integer (Info.Pixel_Size);
      Row_Padding :=  (32 - (Row_Size mod 32)) mod 32;
      Row_Size := (Row_Size + Row_Padding) / 8;
      Row_Padding := Row_Padding / 8;

      Text_IO.Put_Line ("Row_Size " & Row_Size'Img);
      Text_IO.Put_Line ("Row_Padding " & Row_Padding'Img);

      if Info.Compression /= 0 then
         Put_Line ("Compression not supported.");
         return;
      end if;

      if Info.Palette_Size /= 0 then
         BMP.Palettized (File_In,
                         Input,
                         File_Out,
                         Package_Name,
                         Header,
                         Info,
                         Row_Size);
         Ada.Text_IO.Close (File_Out);
         Stream_IO.Close (File_In);
         return;
      end if;

      if Info.Pixel_Size /= 24 then
         Put_Line ("Only 24bits/pix supported.");
         return;
      end if;

      declare
         subtype Row is BMP.Image_RGB24 (1 .. Integer (Info.Width));
         I : Row;
         Offset : Integer;
      begin
         Text_IO.Put_Line (File_Out, "--  This file was generated by bmp2ada");
         Text_IO.Put_Line (File_Out, "with Giza.Bitmaps; use Giza.Bitmaps;");
         Text_IO.Put_Line (File_Out, "with Giza.Images.Bitmap;");
         Text_IO.New_Line (File_Out);
         Text_IO.Put_Line (File_Out, "package " & Package_Name & " is");
         Text_IO.Put_Line (File_Out, "   pragma Style_Checks (Off);");
         Text_IO.New_Line (File_Out);
         Text_IO.Put_Line (File_Out, "   Data : aliased Bitmap := (W =>" &
                             Info.Width'Img &
                             ", H =>" & Info.Height'Img & ", Data => ((");
         for Row_Cnt in reverse 0 .. Integer (Info.Height) - 1 loop
            Offset := Integer (Header.Offset) + Row_Size * Row_Cnt;

            --  Move read pointer to where the row data starts.
            Stream_IO.Set_Index (File_In,
                                 Stream_IO.Positive_Count (Offset + 1));
            Row'Read (Input, I);

            for Index in I'Range loop
               Text_IO.Put (File_Out,
                            "      (R => " & I (Index).R'Img &
                              ", G =>" & I (Index).G'Img &
                              ", B =>" & I (Index).B'Img & ")");
               if Index = I'Last then
                  if Row_Cnt = 0 then
                     Text_IO.Put_Line (File_Out, ")");
                  else
                     Text_IO.Put_Line (File_Out, "), (");
                  end if;
               else
                  Text_IO.Put_Line (File_Out, ",");
               end if;
            end loop;
         end loop;
         Text_IO.Put_Line (File_Out, "));");
         Text_IO.New_Line (File_Out);
         Text_IO.Put_Line
           (File_Out, "    Image : " &
           "aliased Giza.Images.Bitmap.Bitmap_Image (Data'Access);");

         Text_IO.Put_Line (File_Out, "   pragma Style_Checks (On);");
         Text_IO.Put_Line (File_Out, "end " & Package_Name & ";");
         Ada.Text_IO.Close (File_Out);
         Stream_IO.Close (File_In);
      end;
   end;
end Main;
